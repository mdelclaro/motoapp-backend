FORMAT: 1A
HOST: http://motoapp.com/v1

# API MotoApp

API Backend da plataforma MotoApp

# Group Sobre
# API MotoApp [/]

API que trabalha como backend para os dois aplicativos móveis da plataforma MotoApp

# Group Auth

## Auth Cliente [/auth/cliente/]

### Login Cliente [POST]
Fazer login do cliente (gerar JWT)

+ Attributes (object)
    + email: `email@email.com` (string)
    + senha: `123456` (string)

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + token: `eyJhbGci` (string)
        + refreshToken: `dhBur8v` (string)
        + userId: `5ca39f` (string)
        + expiryDate: `Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)` (string)
        + imgPerfil: `images\c228ea5` (string)

+ Response 401 (application/json)
    + Attributes (object)
        + statusCode: 401 (number)
        + message: `Senha inválida` (string)
        
+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Refresh Token Cliente [/auth/cliente/refreshToken/]

### Refresh Token Cliente [POST]
Atualizar JWT

+ Attributes (object)
    + refreshToken: `fdC4h9` (string)

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + token: `eyJhbGci` (string)
        + userId: `5ca39f` (string)
        + expiryDate: `Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)` (string)

+ Response 401 (application/json)
    + Attributes (object)
        + statusCode: 401 (number)
        + message: `E-mail não cadastrado` (string)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)
    + Attributes (object)
        + statusCode: 500 (number)
        + message: `Token inválido` (string)

## Auth Motoqueiro [/auth/motoqueiro/]

### Login Motoqueiro [POST]
Fazer login do motoqueiro (gerar JWT)

+ Attributes (object)
    + email: `email@email.com` (string)
    + senha: `123456` (string)

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + token: `eyJhbGci` (string)
        + refreshToken: `dhBur8v` (string)
        + userId: `5ca39f` (string)
        + expiryDate: `Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)` (string)
        + imgPerfil: `images\c228ea5` (string)
        + accountStatus: 1 (number)

+ Response 401 (application/json)
    + Attributes (object)
        + statusCode: 401 (number)
        + message: `Senha inválida` (string)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Refresh Token Motoqueiro [/auth/motoqueiro/refreshToken/]

### Refresh Token Motoqueiro [POST]
Atualizar JWT

+ Attributes (object)
    + refreshToken: `fdC4h9` (string)

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (object)
        + token: `eyJhbGci` (string)
        + userId: `5ca39f` (string)
        + expiryDate: `Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)` (string)
        + accountStatus: 1 (number)

+ Response 401 (application/json)
    + Attributes (object)
        + statusCode: 401 (number)
        + message: `E-mail não cadastrado` (string)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)
    + Attributes (object)
        + statusCode: 500 (number)
        + message: `Token inválido` (string)

# Group Usuário

## Clientes [/usuario/cliente/]

### Buscar Clientes [GET]
Listar clientes

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Sucesso` (string)
        + clientes (array[Cliente])

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

### Criar Cliente [POST]
Criar cliente

+ Attributes (object)
    + nome: `John` (string, required)
    + sobrenome: `Doe` (string, required)
    + email: `email@email.com` (string, required)
    + senha: `123456` (string, required)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (object)
        + message: `Cliente criado com sucesso!`
        + cliente (object)
            + _id: `5c7d3f` (string)
            + nome: `John` (string)
            + sobrenome: `Doe` (string)
            + email: `email@email.com` (string)
            + status: 1 (number)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Cliente [/usuario/cliente/{idCliente}]

+ Parameters
    + idCliente: `5c9dc711` (string, required) - ID do cliente

### Buscar Cliente [GET]
Listar cliente

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Sucesso` (string)
        + cliente (Cliente)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

### Atualizar Cliente [PUT]
Atualizar cliente

+ Request (multipart/form-data; boundary=---BOUNDARY)

    + Body

            ---BOUNDARY
            Content-Disposition: form-data; name="email"
            Content-Type: text/plain

            "email@email.com"
            ---BOUNDARY
            Content-Disposition: form-data; name="senha"
            Content-Type: text/plain

            "123456"
            ---BOUNDARY
            Content-Disposition: form-data; name="imgPerfil"
            Content-Type: image/jpeg
            Content-Type: image/jpg
            Content-Type: image/png

            "content of image"
            ---BOUNDARY--

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Cliente atualizado` (string)
        + cliente (Cliente)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 403 (application/json)
    + Attributes (Error_403)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Motoqueiros [/usuario/motoqueiro/]

### Buscar Motoqueiros [GET]
Listar motoqueiros

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Sucesso` (string)
        + motoqueiros (array[Motoqueiro])

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

### Criar Motoqueiro [POST]
Criar motoqueiro

+ Attributes (object)
    + nome: `John` (string, required)
    + sobrenome: `Doe` (string, required)
    + email: `email@email.com` (string, required)
    + senha: `123456` (string, required)

+ Request (application/json)

+ Response 201 (application/json)
    + Attributes (object)
        + message: `Motoqueiro criado com sucesso!`
        + cliente (object)
            + _id: `5c7d3f` (string)
            + nome: `John` (string)
            + sobrenome: `Doe` (string)
            + email: `email@email.com` (string)
            + status: 1 (number)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Motoqueiro [/usuario/motoqueiro/{idMotoqueiro}]

+ Parameters
    + idMotoqueiro: `5c9dc711` (string, required) - ID do motoqueiro

### Buscar Motoqueiro [GET]
Listar motoqueiro

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Sucesso` (string)
        + motoqueiro (Motoqueiro)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

### Atualizar Motoqueiro [PUT]
Atualizar motoqueiro

+ Request (multipart/form-data; boundary=---BOUNDARY)

    + Body

            ---BOUNDARY
            Content-Disposition: form-data; name="email"
            Content-Type: text/plain

            "email@email.com"
            ---BOUNDARY
            Content-Disposition: form-data; name="senha"
            Content-Type: text/plain

            "123456"
            ---BOUNDARY
            Content-Disposition: form-data; name="moto"
            Content-Type: text/plain

            "Titan 125 - Preta"
            ---BOUNDARY
            Content-Disposition: form-data; name="placa"
            Content-Type: text/plain

            "gvg5478"
            ---BOUNDARY
            Content-Disposition: form-data; name="imgPerfil"
            Content-Type: image/jpeg
            Content-Type: image/jpg
            Content-Type: image/png

            "content of image"
            ---BOUNDARY
            Content-Disposition: form-data; name="cnh1"
            Content-Type: image/jpeg
            Content-Type: image/jpg
            Content-Type: image/png

            "content of image"
            ---BOUNDARY
            Content-Disposition: form-data; name="cnh2"
            Content-Type: image/jpeg
            Content-Type: image/jpg
            Content-Type: image/png

            "content of image"
            ---BOUNDARY--

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Motoqueiro atualizado` (string)
        + cliente (Motoqueiro)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 403 (application/json)
    + Attributes (Error_403)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

# Group Corrida

## Corridas [/corrida/]

### Buscar Corridas [GET]
Listar corridas

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (array[Corrida])

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

### Criar Corrida [POST]
Criar corrida

+ Attributes (object)
    + origem (object, required)
        + lat: `-22.80014983` (string)
        + long: `-47.56456563` (string)
        + local: `R. Paraguai` (string)
    + destino (object, required)
        + lat: `-23.7851587` (string)
        + long: `-45.5153302` (string)
        + local: `Avenida João Pinheiro` (string)
    + distancia: 1200 (number, required)
    + tempo: 8 (number, required)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 201 (application/json)
    + Attributes (object)
        + message: `Corrida criada com sucesso!`
        + corrida (object)
            + _id: `5asb8d` (string)
            + origem (object)
                + lat: `-22.80014983` (string)
                + long: `-47.56456563` (string)
                + local: `R. Paraguai` (string)
            + destino (object)
                + lat: `-23.7851587` (string)
                + long: `-45.5153302` (string)
                + local: `Avenida João Pinheiro` (string)
            + distancia: 1200 (number)
            + tempo: 8 (number)
            + idCliente: `5ca39f` (string)
            + status: 0 (number)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

## Corrida [/corrida/{idCorrida}]

+ Parameters
    + idCorrida: `5c9528711` (string, required) - ID da corrida

### Buscar Corrida [GET]
Listar corrida

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (Corrida)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

### Atualizar Corrida [PUT]
Atualizar corrida. Parâmetro idMotoqueiro required apenas quando status == 1

+ Attributes (object)
    + idMotoqueiro: `5ca39f` (string, optional)
    + status: 1 (number, required)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Corrida atualizada` (string)
        + corrida (Corrida)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 403 (application/json)
    + Attributes (Error_403)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

### Deletar Corrida [DELETE]
Deletar corrida

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + statusCode: 200 (number)
        + message: `Deletado` (string)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 403 (application/json)
    + Attributes (Error_403)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

# Group Localização

## Localizações [/location/]

### Buscar Localizações [GET]
Listar localizações

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (array[Location])

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

### Criar Localização [POST]
Criar Localização, ou atualizar

+ Attributes (object)
    + location (object)
        + lat: `-22.80014983` (string)
        + long: `-47.56456563` (string)
        + local: `R. Assis` (string)
    + idMotoqueiro: `5fabD9` (string)

+ Request (application/json)
 
    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Localização atualizada/criada com sucesso!` (string)
        + motoqueiroLocation (Location)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 403 (application/json)
    + Attributes (Error_403)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

## Localização [/location/{idMotoqueiro}]

+ Parameters
    + idMotoqueiro: `5c9528711` (string, required) - ID do motoqueiro

### Buscar Localização [GET]
Listar localização

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (Location)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

# Group Avaliação

## Avaliações [/avaliacao/]

### Buscar Avaliações [GET]
Listar avaliações

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (array[Avaliação])

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

### Criar Avaliação [POST]
Criar avaliação

+ Attributes (object)
    + nota: 5 (number)
    + comentario: `Ótimo` (string, optional)
    + idCliente: `8dgA3d` (string)
    + idMotoqueiro: `5fabD9` (string)

+ Request (application/json)
 
    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (object)
        + message: `Avaliação criada com sucesso!` (string)
        + motoqueiroLocation (Avaliação)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 500 (application/json)

## Avaliação [/avaliacao/{idAvaliacao}]

+ Parameters
    + idAvaliacao: `5c9528711` (string, required) - ID da avaliação

### Buscar Avaliação [GET]
Listar avaliação

+ Request (application/json)

    + Headers
    
            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes (Avaliação)

+ Response 401 (application/json)
    + Attributes (Error_401)

+ Response 404 (application/json)
    + Attributes (Error_404)

+ Response 422 (application/json)
    + Attributes (Error_422)

+ Response 500 (application/json)

# Data Structures

## Cliente (object)
+ _id: `5c7d3f` (string) - ID do cliente
+ nome: `John` (string) - Nome do cliente
+ sobrenome: `Doe` (string) - Sobrenome do cliente
+ email: `email@email.com` (string) - Email do cliente
+ corridas (array[Corrida]) - Corridas pedidas pelo cliente
+ imgPerfil: `images/124gydg7` (string) - URL da imagem de perfil do cliente
+ status: 1 (number) - Status do cliente. 1 - Ativo, 0 - Inativo

## Motoqueiro (object)
+ _id: `5c7d3f` (string) - ID do motoqueiro
+ nome: `John` (string) - Nome do motoqueiro
+ sobrenome: `Doe` (string) - Sobrenome do motoqueiro
+ email: `email@email.com` (string) - Email do motoqueiro
+ cnh1: `images/123abc`  (string) - URL da foto da CNH (frente)
+ cnh2: `images/456def`  (string) - URL da foto da CNH (verso)
+ moto: `Titan 125 - Preta` (string) - Modelo e cor do veículo do motoqueiro
+ placa: `gvg1234` (string) - Placa do veículo do motoqueiro
+ corridas (array[Corrida]) - Corridas feitas pelo motoqueiro
+ avaliacoes (array[Avaliação]) - Avaliações do motoqueiro
+ imgPerfil: `images/124gydg7` (string) - URL da imagem de perfil do motoqueiro
+ status: 2 (number) - Status do motoqueiro. 2 - Ativo, 1 - Em análise, 0 - Inativo

## Corrida (object)
+ origem (object, required) - Origem da corrida
    + lat: `-22.80014983` (string)
    + long: `-47.56456563` (string)
    + local: `R. Paraguai` (string)
+ destino (object, required) - Destino da corrida
    + lat: `-23.7851587` (string)
    + long: `-45.5153302` (string)
    + local: `Avenida João Pinheiro` (string)
+ distancia: 1200 (number, required) - Distacia entre origem e destino da corrida
+ tempo: 8 (number, required) - Minutos entre origem e destino da corrida
+ idCliente: `5ca39f` (string, required) - ID do cliente que criou a corrida
+ idMotoqueiro: `9ca32a` (string, optional) - ID do motoqueiro que aceitou a corrida
+ status: 0 (number) - 
    Status da corrida. 
    0 - Corrida Solicitada
    1 - Corrida Aceita
    2 - Corrida em Andamento
    3 - Corrida Finalizada
    4 - Corrida Cancelada

## Location (object)
+ idMotoqueiro: `9ca32a` (string) - ID do motoqueiro
+ location - Localização do motoqueiro
    + lat: `-23.7851587` (string)
    + long: `-45.5153302` (string)
    + local: `Avenida João Pinheiro` (string)

## Avaliação (object)
+ nota: 5 (number) - Avaliação de 1 a 5 do motoqueiro
+ comentario: `Ótimo` (string, optional) - Comentário do cliente sobre o motoqueiro
+ idCliente: `5ca39f` (string) - ID do cliente de criou a avaliação
+ idMotoqueiro: `9ca32a` (string) - ID do motoqueiro avaliado

## `Error_401` (object)
+ statusCode: 401 (number) - Status code
+ message: `Not authenticated` (string) - Mensagem do status

## `Error_403` (object)
+ statusCode: 403 (number) - Status code
+ message: `Não autorizado` (string) - Mensagem do status

## `Error_404` (object)
+ statusCode: 404 (number) - Status code
+ message: `Recurso não encontrado` (string) - Mensagem do status

## `Error_422` (object)
+ statusCode: 422 (number) - Status code
+ message: `Parâmetro inválido ou não informado` (string) - Mensagem do status
